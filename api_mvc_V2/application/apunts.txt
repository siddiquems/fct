- MVC
# ..........................................................................
crear backend para cada elemento
separar-los - fet!

un model para cada elemento
model documents, model corpus - fet!

separar controladores -  fet!

separara rutas - fet!


- TESTING
# ..........................................................................
testear con testings

test unitarios en flask - fet!
libreria unittest

import unittest


- LOGIN
# ..........................................................................
google authentification

- authentification with users
x usuario tenga control de acciones

2 options.
google authentification, and store users in bbdd

Capa de usuarios
- Admin (ALL CRUD options)
- Anotador (interacturar con anotaciones, solo puede ver lo que tiene asignado)
- Invitador (only READ, no edit. Solo puede acceder a una parte de la app)

Tabla de usuarios en la bd:
Datos de usuario, y role de cada usuario



# Questions
# --------------------------------------------------------------------------------
Insersión de documents sin importar la especialidad
    Resposta : Sin importar la especialdad ni el corpus
Eliminación de una especialidad, también elimina los documents de esa especialidad
    Resposta : No se eliminan los documentos, se cambian a otra especialidad.

Update de documento: Añadir un documento a otra especialidad o varias especialdades.



# Gitignore
# --------------------------------------------------------------------------------
Archivo con variables, y todos pycaches
Host, username, password, db. En archivo de variables.
El archivo de environments no se sube al git.


# Archivo de configuration.
